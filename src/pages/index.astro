---
import '../styles/global.css';
import Header from '../components/Header.astro';
import Sidebar from '../components/Sidebar.astro';
import { calculateReadingTime } from '../utils/readingTime.js';

const allPosts = Object.values(await import.meta.glob('./blog/*.md', { eager: true }));

// Filter out future posts and sort newest to oldest
const now = new Date();
const publishedPosts = allPosts.filter(post => new Date(post.frontmatter.date) <= now);
const sortedPosts = publishedPosts.sort((a, b) => new Date(b.frontmatter.date) - new Date(a.frontmatter.date));

// Show first 8 posts on homepage
const postsPerPage = 8;
const posts = sortedPosts.slice(0, postsPerPage).map((post) => {
  // Try different ways to get content for reading time
  let content = '';
  if (typeof post.rawContent === 'function') {
    content = post.rawContent();
  } else if (post.body) {
    content = post.body;
  } else if (post.compiledContent) {
    content = typeof post.compiledContent === 'function' ? post.compiledContent() : post.compiledContent;
  }
  
  const readingTime = calculateReadingTime(content);
  return { ...post, readingTime };
});
const totalPages = Math.ceil(sortedPosts.length / postsPerPage);

// Generate calendar for current month
const today = new Date();
const currentMonth = today.getMonth();
const currentYear = today.getFullYear();
const firstDay = new Date(currentYear, currentMonth, 1);
const lastDay = new Date(currentYear, currentMonth + 1, 0);
const startDate = new Date(firstDay);
startDate.setDate(startDate.getDate() - firstDay.getDay());

const calendarDays = [];
for (let d = new Date(startDate); calendarDays.length < 42; d.setDate(d.getDate() + 1)) {
  const dateStr = d.toISOString().split('T')[0];
  const hasPost = publishedPosts.some(post => {
    if (!post.frontmatter.date) return false;
    const postDate = new Date(post.frontmatter.date);
    if (isNaN(postDate.getTime())) return false;
    return postDate.toISOString().split('T')[0] === dateStr;
  });
  const isToday = d.toDateString() === today.toDateString();
  const isCurrentMonth = d.getMonth() === currentMonth;
  calendarDays.push({ date: d.getDate(), hasPost, isToday, isCurrentMonth, fullDate: dateStr });
}

// Generate tag cloud from published posts
const tagCounts = {};
publishedPosts.forEach(post => {
  post.frontmatter.tags?.forEach(tag => {
    tagCounts[tag] = (tagCounts[tag] || 0) + 1;
  });
});
const tags = Object.entries(tagCounts).map(([tag, count]) => ({ tag, count }));

// Create post dates array for calendar script
const postDates = publishedPosts.map(p => p.frontmatter.date).filter(Boolean);
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/png" href="https://avatars.githubusercontent.com/u/10219431" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Threads of Thought</title>
		<meta name="description" content="A personal blog about Go programming, software development, and random thoughts by Kristina." />
		
		<!-- Open Graph / Facebook -->
		<meta property="og:type" content="website" />
		<meta property="og:url" content="https://ikristina.github.io" />
		<meta property="og:title" content="Threads of Thought" />
		<meta property="og:description" content="A personal blog about Go programming, software development, and random thoughts by Kristina." />
		<meta property="og:image" content="https://ikristina.github.io/logo-social.png" />
		<meta property="og:site_name" content="Threads of Thought" />
		
		<!-- Twitter -->
		<meta property="twitter:card" content="summary_large_image" />
		<meta property="twitter:url" content="https://ikristina.github.io" />
		<meta property="twitter:title" content="Threads of Thought" />
		<meta property="twitter:description" content="A personal blog about Go programming, software development, and random thoughts by Kristina." />
		<meta property="twitter:image" content="https://ikristina.github.io/logo-social.png" />
		
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Libre+Baskerville:wght@400;700&family=Source+Serif+Pro:ital,wght@0,400;0,600;1,400&family=Courier+Prime:wght@400;700&display=swap" rel="stylesheet">

		<link rel="alternate" type="application/rss+xml" title="Threads of Thought RSS" href="/rss.xml" />
		
		<!-- GoatCounter Analytics -->
		<script data-goatcounter="https://ikristina.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>
	</head>
	<body>
		<Header />
		<div class="content-wrapper">
			<div class="main-content">
				<main>

				<ul>
					{posts.map((post) => (
						<li>
							<a href={post.url}>{post.frontmatter.title}</a>
							<p class="date">{post.frontmatter.date} <span class="reading-time">ðŸ“– {post.readingTime} min read</span></p>
							<p class="description">{post.frontmatter.description}</p>
							<div class="tags">
								{post.frontmatter.tags?.map((tag) => (
									<a href={`/tags/${tag}`} class="tag">{tag}</a>
								))}
							</div>
							<a href={post.url} class="read-more">Read more â†’</a>
						</li>
					))}
				</ul>
				
				{totalPages > 1 && (
					<nav class="pagination">
						<span class="page-info">Page 1 of {totalPages}</span>
						<a href="/page/2" class="page-link">Next â†’</a>
					</nav>
				)}
				
				<footer>
					<p>Â© 2025 Threads of Thought. Built with <a href="https://astro.build">Astro</a>.</p>
				</footer>
			</main>
			</div>
			<Sidebar posts={publishedPosts} />
		</div>
		<script define:vars={{ currentMonth, currentYear, postDates }}>
			let calendarMonth = currentMonth;
			let calendarYear = currentYear;
			const posts = postDates;

			function updateCalendar() {
				document.getElementById('calendar-title').textContent = 
					new Date(calendarYear, calendarMonth).toLocaleDateString('en-US', { month: 'long' });
				document.getElementById('year-display').textContent = calendarYear;
				
				const firstDay = new Date(calendarYear, calendarMonth, 1);
				const startDate = new Date(firstDay);
				startDate.setDate(startDate.getDate() - firstDay.getDay());
				
				const calendarGrid = document.getElementById('calendar-grid');
				calendarGrid.innerHTML = '';
				
				const today = new Date();
				
				for (let i = 0; i < 42; i++) {
					const d = new Date(startDate);
					d.setDate(d.getDate() + i);
					
					const dateStr = d.toISOString().split('T')[0];
					const hasPost = posts.some(p => {
						const postDate = new Date(p);
						return !isNaN(postDate.getTime()) && postDate.toISOString().split('T')[0] === dateStr;
					});
					const isToday = d.getDate() === today.getDate() && d.getMonth() === today.getMonth() && d.getFullYear() === today.getFullYear();
					const isCurrentMonth = d.getMonth() === calendarMonth;
					
					const dayEl = document.createElement('div');
					dayEl.className = `calendar-day ${isToday && isCurrentMonth ? 'today' : ''} ${hasPost ? 'has-post' : ''} ${!isCurrentMonth ? 'text-gray-400' : ''}`;
					dayEl.textContent = isCurrentMonth ? d.getDate() : '';
					dayEl.setAttribute('data-date', dateStr);
					dayEl.setAttribute('data-has-post', hasPost);
					calendarGrid.appendChild(dayEl);
				}
			}

			document.getElementById('prev-month').addEventListener('click', () => {
				calendarMonth--;
				if (calendarMonth < 0) { calendarMonth = 11; calendarYear--; }
				updateCalendar();
			});

			document.getElementById('next-month').addEventListener('click', () => {
				calendarMonth++;
				if (calendarMonth > 11) { calendarMonth = 0; calendarYear++; }
				updateCalendar();
			});

			document.getElementById('prev-year').addEventListener('click', () => {
				calendarYear--;
				updateCalendar();
			});

			document.getElementById('next-year').addEventListener('click', () => {
				calendarYear++;
				updateCalendar();
			});

			// Add click handlers for calendar days
			document.addEventListener('click', (e) => {
				const target = e.target.closest('.calendar-day');
				if (target && target.classList.contains('has-post') && target.textContent.trim() !== '') {
					const year = calendarYear;
					const month = calendarMonth;
					const day = parseInt(target.textContent);
					const date = new Date(year, month, day).toISOString().split('T')[0];
					window.location.href = `/date/${date}`;
				}
			});

		</script>
	</body>
</html>
