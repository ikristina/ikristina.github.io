---
export interface Props {
  frontmatter: {
    title: string;
    date: string;
    tags?: string[];
  };
}

import '../styles/global.css';
import Header from '../components/Header.astro';
import Sidebar from '../components/Sidebar.astro';
import Comments from '../components/Comments.astro';
import { calculateReadingTime } from '../utils/readingTime.js';

const { frontmatter } = Astro.props;
const { title, date, tags, showToc, description, image } = frontmatter || {};

// Calculate reading time
const content = await Astro.slots.render('default');
const readingTime = calculateReadingTime(content);

// SEO data
const siteUrl = 'https://ikristina.github.io';
const postUrl = `${siteUrl}${Astro.url.pathname}`;

// Extract first image from content if no image provided
let ogImage = image ? `${siteUrl}${image}` : null;
if (!ogImage) {
  const imgMatch = content.match(/<img[^>]+src=["']([^"']+)["'][^>]*>/i);
  if (imgMatch) {
    const imgSrc = imgMatch[1];
    ogImage = imgSrc.startsWith('http') ? imgSrc : `${siteUrl}${imgSrc}`;
  } else {
    ogImage = `${siteUrl}/og-default.png`;
  }
}

// Get all posts for calendar and tag cloud
const allPosts = Object.values(await import.meta.glob('../pages/blog/*.md', { eager: true }));
const now = new Date();
const posts = allPosts.filter(post => new Date(post.frontmatter.date) <= now);

// Sort posts by date for navigation
const sortedPosts = posts.sort((a, b) => new Date(b.frontmatter.date) - new Date(a.frontmatter.date));
const currentIndex = sortedPosts.findIndex(post => post.frontmatter.title === title);
const prevPost = currentIndex < sortedPosts.length - 1 ? sortedPosts[currentIndex + 1] : null;
const nextPost = currentIndex > 0 ? sortedPosts[currentIndex - 1] : null;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/png" href="https://avatars.githubusercontent.com/u/10219431" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <meta name="description" content={description || `Read ${title} on Threads of Thought`} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="article" />
    <meta property="og:url" content={postUrl} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description || `Read ${title} on Threads of Thought`} />
    <meta property="og:image" content={ogImage} />
    <meta property="og:site_name" content="Threads of Thought" />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={postUrl} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description || `Read ${title} on Threads of Thought`} />
    <meta property="twitter:image" content={ogImage} />
    
    {showToc && <meta name="show-toc" content="true" />}
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Libre+Baskerville:wght@400;700&family=Source+Serif+Pro:ital,wght@0,400;0,600;1,400&family=Courier+Prime:wght@400;700&display=swap" rel="stylesheet">

    <script src="https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.min.js"></script>
    
    <!-- GoatCounter Analytics -->
    <script data-goatcounter="https://ikristina.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>
  </head>
  <body>
    <Header />
    <div class="content-wrapper">
      <div class="main-content">
        <main>
        <div class="post-header">
          <h1>{title}</h1>
          <div class="post-meta">
            <p><em>{date}</em> <span class="reading-time">üìñ {readingTime} min read</span></p>
            <div class="post-tags">
              {tags?.map((tag) => (
                <a href={`/tags/${tag}`} class="tag">{tag}</a>
              ))}
            </div>
          </div>
        </div>
        {showToc && <div id="toc" class="toc"></div>}
        <article class="blog-content">
          <slot />
        </article>
        
        <nav class="post-nav">
          {nextPost && (
            <a href={nextPost.url} class="nav-link prev">
              <span>‚Üê Previous</span>
              <span class="nav-title">{nextPost.frontmatter.title}</span>
            </a>
          )}
          {prevPost && (
            <a href={prevPost.url} class="nav-link next">
              <span>Next ‚Üí</span>
              <span class="nav-title">{prevPost.frontmatter.title}</span>
            </a>
          )}
        </nav>
        
        <Comments />
        
        <footer>
          <p>¬© 2025 Threads of Thought. Built with <a href="https://astro.build">Astro</a>.</p>
        </footer>
      </main>
      </div>
      <Sidebar posts={posts} />
    </div>
    
    <script>
      setTimeout(function() {
        // Add code headers
        document.querySelectorAll('pre').forEach(function(pre) {
          const code = pre.querySelector('code');
          
          let language = 'Code';
          
          // Check for data-language attribute (Shiki) or language class (fallback)
          const dataLang = pre.getAttribute('data-language');
          const preMatch = pre.className.match(/language-(\w+)/);
          const codeMatch = code ? code.className.match(/language-(\w+)/) : null;
          
          if (dataLang) {
            language = dataLang.charAt(0).toUpperCase() + dataLang.slice(1);
          } else if (preMatch) {
            language = preMatch[1].charAt(0).toUpperCase() + preMatch[1].slice(1);
          } else if (codeMatch) {
            language = codeMatch[1].charAt(0).toUpperCase() + codeMatch[1].slice(1);
          }
          
          const header = document.createElement('div');
          header.style.cssText = 'background: #2d2d2d; padding: 8px 12px; display: flex; justify-content: space-between; align-items: center; border-radius: 6px 6px 0 0; margin: 0; font-size: 12px;';
          
          const lang = document.createElement('span');
          lang.textContent = language;
          lang.style.cssText = 'color: #9ca3af; font-family: monospace;';
          
          const copy = document.createElement('button');
          copy.textContent = 'Copy';
          copy.style.cssText = 'background: none; border: 1px solid #555; color: #9ca3af; padding: 2px 8px; border-radius: 3px; cursor: pointer; font-size: 11px;';
          copy.onclick = function() {
            const text = pre.querySelector('code').textContent;
            if (navigator.clipboard) {
              navigator.clipboard.writeText(text).then(() => {
                copy.textContent = 'Copied!';
                setTimeout(() => copy.textContent = 'Copy', 1000);
              });
            } else {
              // Fallback for older browsers
              const textarea = document.createElement('textarea');
              textarea.value = text;
              document.body.appendChild(textarea);
              textarea.select();
              document.execCommand('copy');
              document.body.removeChild(textarea);
              copy.textContent = 'Copied!';
              setTimeout(() => copy.textContent = 'Copy', 1000);
            }
          };
          
          header.appendChild(lang);
          header.appendChild(copy);
          
          pre.style.borderRadius = '0 0 6px 6px';
          pre.style.marginTop = '0';
          pre.parentNode.insertBefore(header, pre);
        });
      }, 200);
      
      // Initialize Mermaid
      setTimeout(() => {
        if (typeof mermaid !== 'undefined') {
          console.log('Mermaid found, initializing...');
          mermaid.initialize({ 
            startOnLoad: false, 
            theme: 'default',
            securityLevel: 'loose'
          });
          
          // Find mermaid code blocks
          const mermaidBlocks = document.querySelectorAll('pre code.language-mermaid');
          console.log('Found mermaid blocks:', mermaidBlocks.length);
          
          mermaidBlocks.forEach((block, index) => {
            console.log('Processing mermaid block', index);
            const mermaidDiv = document.createElement('div');
            mermaidDiv.className = 'mermaid';
            mermaidDiv.textContent = block.textContent;
            mermaidDiv.id = `mermaid-${index}`;
            block.parentElement.replaceWith(mermaidDiv);
          });
          
          if (mermaidBlocks.length > 0) {
            mermaid.run();
          }
        } else {
          console.log('Mermaid not found');
        }
      }, 500);
      
      // Generate table of contents only if showToc is true in frontmatter
      const showToc = document.querySelector('meta[name="show-toc"]')?.content === 'true';
      const headings = document.querySelectorAll('article h2, article h3');
      if (showToc && headings.length > 0) {
        const toc = document.getElementById('toc');
        const tocList = document.createElement('ul');
        tocList.style.cssText = 'list-style: none; padding: 1rem; background: #f9f9f9; border-radius: 6px; margin-bottom: 2rem;';
        
        const tocTitle = document.createElement('h4');
        tocTitle.textContent = 'Table of Contents';
        tocTitle.style.margin = '1.5rem 0 0 0';
        toc.appendChild(tocTitle);
        
        headings.forEach((heading, i) => {
          const id = 'heading-' + i;
          heading.id = id;
          
          const li = document.createElement('li');
          const a = document.createElement('a');
          a.href = '#' + id;
          a.textContent = heading.textContent;
          a.style.cssText = 'color: #38a169; text-decoration: none; padding: 0.2rem 0; display: block;';
          
          if (heading.tagName === 'H3') {
            li.style.paddingLeft = '1rem';
          }
          
          li.appendChild(a);
          tocList.appendChild(li);
        });
        
        toc.appendChild(tocList);
      }
      
      // Image popup functionality
      document.querySelectorAll('article img, .blog-content img').forEach(img => {
        img.style.cursor = 'pointer';
        img.addEventListener('click', () => {
          const popup = document.createElement('div');
          popup.style.cssText = 'position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.8);z-index:1000;display:flex;align-items:center;justify-content:center;cursor:pointer';
          
          const popupImg = document.createElement('img');
          popupImg.src = img.src;
          popupImg.alt = img.alt;
          popupImg.style.cssText = 'max-width:90%;max-height:90%;object-fit:contain';
          
          popup.appendChild(popupImg);
          document.body.appendChild(popup);
          
          popup.addEventListener('click', () => {
            document.body.removeChild(popup);
          });
        });
      });
    </script>
  </body>
</html>